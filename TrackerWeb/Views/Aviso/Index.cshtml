@model TrackerWeb.Models.AvisoViewModel
@{
    ViewData["Title"] = "Avisos";
}

<h1>Avisos</h1>

<div class="col-mb-3">
    <div class="form-check form-switch col-sm-4 float-start">
        <input class="form-check-input" type="checkbox" id="flexSwitchSoloAsignados">
        <label class="form-check-label" for="flexSwitchCheckDefault">Ver solo avisos sin asignar</label>
    </div>
    <div class="col-sm-4 float-end">
        <button type="button" class="btn btn-light float-end" data-bs-toggle="modal" data-bs-target="#newAvisoModal">Nuevo Aviso</button>
    </div>
</div>

<br />
<br />
<br />
<br />

<div id="gridTest" class="col-md-12"> </div>

<div class="modal fade" id="newAvisoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Nuevo Aviso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body align-items-center">
                @Html.Partial("_AddAviso")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" id="btnSaveNewAviso" class="btn btn-primary">Guardar</button>
            </div>
        </div>
    </div>
</div>



<script>
    const now = new Date();
    var model = JSON.parse(('@Html.Raw(Json.Serialize(@Model))').escapeSpecialChars());
    var datosGrid = model.avisos;
    var isAdmin = getCookie("trackerAdmin");
    var isAsign = getCookie("trackerAsign");
    
    var cliente = "";
    var fuente = "";
    var estado = "";
    var tipo = "";
    var origen = "";


    //var model = JSON.parse(myJSONString.escapeSpecialChars());

    $("#selectCliente").selectize({
        sortField: "text",
        options: model.clientes,
        labelField: 'nombre',
        valueField: 'idcliente',
        searchField: 'nombre',
        render: {
            option: function (data, escape) {
                return '<div class="option">' +
                    '<span class="title">' + escape(data.nombre) + '</span>' +
                    '</div>';
            }
        }, onChange: function (value) {
            cliente = value;
        }
    });

    $("#selectFuente").selectize({
        sortField: "text",
        options: model.fuentes,
        labelField: 'valor',
        valueField: 'clave',
        searchField: 'valor',
        render: {
            option: function (data, escape) {
                return '<div class="option">' +
                    '<span class="title">' + escape(data.valor) + '</span>' +
                    '</div>';
            }
        }, onChange: function (value) {
            fuente = value;
        }
    });

    $("#selectEstado").selectize({
        sortField: "text",
        options: model.estados,
        labelField: 'valor',
        valueField: 'clave',
        searchField: 'valor',
        render: {
            option: function (data, escape) {
                return '<div class="option">' +
                    '<span class="title">' + escape(data.valor) + '</span>' +
                    '</div>';
            }
        }, onChange: function (value) {
            estado = value;
        }
    });

    $("#selectTipo").selectize({
        sortField: "text",
        options: model.tipos,
        labelField: 'valor',
        valueField: 'clave',
        searchField: 'valor',
        render: {
            option: function (data, escape) {
                return '<div class="option">' +
                    '<span class="title">' + escape(data.valor) + '</span>' +
                    '</div>';
            }
        }, onChange: function (value) {
            tipo = value;
        }
    });

    $("#selectOrigen").selectize({
        sortField: "text",
        options: model.origenes,
        labelField: 'valor',
        valueField: 'clave',
        searchField: 'valor',
        render: {
            option: function (data, escape) {
                return '<div class="option">' +
                    '<span class="title">' + escape(data.valor) + '</span>' +
                    '</div>';
            }
        }, onChange: function (value) {
            origen = value;
        }
    });

    var dateTimeBox = $("#fechaAviso").dxDateBox({
        "opened": false,
        type: 'datetime',
        value: now,
        displayFormat: 'dd/MM/yyyy HH:mm:ss',
    });

    var grid = $("#gridTest").dxDataGrid({
        dataSource: {
            key: "idcaso",
            load: function () {
                return datosGrid;
            }
        },
        allowColumnResizing: true,
        columnAutoWidth: true,
        searchPanel: { visible: true },
        headerFilter: { visible: true },
        filterRow: { visible: true },
        filterPanel: { visible: true },
        paging: {
            pageSize: 10,
        },
        pager: {
            visible: true,
            allowedPageSizes: [5, 10, 20, 'all'],
            showPageSizeSelector: true,
            showInfo: true,
            showNavigationButtons: true,
        },
        selection: {
            mode: 'multiple'
        },
        export: {
            enabled: true
        },
        onExporting: function (e) {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Main sheet');

            DevExpress.excelExporter.exportDataGrid({
                worksheet: worksheet,
                component: e.component
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Avisos.xlsx');
                });
            });
            e.cancel = true;
        },
        columns: [
            "fecha",
            { dataField: "cliente", width: 200, format: "fixedPoint" },
            "estado",
            "tipo",
            "origen",
            "prioridad",
            "numcaso",
            "fuente",
            { dataField: "descripcion", width: 200 },
            "asignado",
            "empleado"
        ]
    });

    $("#flexSwitchSoloAsignados").change(() => {
        datosGrid = model.avisos;
        if ($("#flexSwitchSoloAsignados").prop("checked")) {
            datosGrid = model.avisos.filter((x) => x.asignado === true);
        }
        grid.dxDataGrid("getDataSource").reload();
    });

    $("#btnSaveNewAviso").click(() => {

        var date = dateTimeBox.dxDateBox("instance").option('value');
        var prioridad = $("input[name=prioridad]:checked").val();
        var descripcion = $("#textDescripcion").val();

        var NuevoAviso = {
            IDCLIENTE: cliente,
            FUENTE: fuente,
            ESTADO: estado,
            TIPO: tipo,
            ORIGEN: origen,
            FECHA: date.toISOString(),
            PRIORIDAD: prioridad,
            DESCRIPCION: descripcion
        }

        console.log(JSON.stringify(NuevoAviso));

        //Hacer insert en BBDD y modelo
        $.ajax({
            type: "POST",
            url: "@Url.Action("Create","Aviso")",
            data: NuevoAviso,
            dataType: "json",
            success: function (response) {
                if (response != null) {
                    //alert("Name : " + response.Name + ", Designation : " + response.Designation + ", Location :" + response.Location);
                    model = response;
                    //Recargar grid
                    datosGrid = model.avisos;
                    grid.dxDataGrid("getDataSource").reload();
                    $('#newAvisoModal').modal('toggle');

                } else {
                    alert("Something went wrong");
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });

        //Desues de guardar en BBDD
        cliente = "";
        fuente = "";
        estado = "";
        tipo = "";
        origen = "";
    });


    function getCookie(cname) {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

</script>
